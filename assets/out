#!/bin/bash
# vim: set ft=sh

set -eu
set -o pipefail

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/cf-functions.sh
source $(dirname $0)/logger.sh
source $(dirname $0)/error-codes.sh

working_dir=${1:-}

if [ -z "$working_dir" ]; then
  logger::error "usage: $0 <path/to/source>"
  exit 1
fi

cd "$working_dir"

# for jq
PATH=/usr/local/bin:$PATH:.

TMPDIR=${TMPDIR:-/tmp}
payload=$(mktemp "$TMPDIR/cf-cli-resource-request.XXXXXX")

cat > $payload <&0

debug=$(jq -r '.source.debug //empty' < $payload)
if [ "$debug" = "true" ]; then
  set -x
fi

params=$(jq -r '.params //empty' < $payload)
if [ -z "$params" ]; then
  logger::error 'invalid payload (missing params)'
  exit $E_PARAMS_NOT_SET
fi

api=$(jq -r '.source.api //empty' < $payload)
skip_cert_check=$(jq -r '.source.skip_cert_check //false' < $payload)
username=$(jq -r '.source.username //empty' < $payload)
password=$(jq -r '.source.password //empty' < $payload)
origin=$(jq -r '.source.origin //empty' < $payload)
client_id=$(jq -r '.source.client_id //empty' < $payload)
client_secret=$(jq -r '.source.client_secret //empty' < $payload)
source_org=$(jq -r '.source.org //empty' < $payload)
source_space=$(jq -r '.source.space //empty' < $payload)
command_file=$(jq -r '.params.command_file //empty' < $payload)

cf_color=$(jq -r '.source.cf_color //empty' < $payload) && [ -n "$cf_color" ] && export CF_COLOR=$cf_color
cf_dial_timeout=$(jq -r '.source.cf_dial_timeout //empty' < $payload) && [ -n "$cf_dial_timeout" ] && export CF_DIAL_TIMEOUT=$cf_dial_timeout
cf_trace=$(jq -r '.source.cf_trace //empty' < $payload) && echo "$cf_trace" | grep -qi 'true' && export CF_TRACE=true

cf_home=$(jq -r '.params.cf_home // empty' < $payload)
if [ -n "$cf_home" ]; then
  export CF_HOME=$cf_home
  export CF_PLUGIN_HOME=$HOME  # Keep the original plugins folder

  if ! cf_is_logged_in; then
    logger::error "not logged in to cf (check $CF_HOME/config.json)"
    exit $E_NOT_LOGGED_IN
  fi

  if [ -z "$source_org" ]; then
    source_org=$(cat $CF_HOME/.cf/config.json | jq -r .OrganizationFields.Name)
  fi

  if [ -z "$source_space" ]; then
    source_space=$(cat $CF_HOME/.cf/config.json | jq -r .SpaceFields.Name)
  fi
else
  if [ -z "$api" ]; then
    logger::error 'invalid payload (missing api)'
    exit $E_API_NOT_SET
  fi

  if [ -z "$username" ] && [ -z "$client_id" ]; then
    logger::error 'invalid payload (must specify username or client_id)'
    exit $E_NEITHER_USERNAME_OR_CLIENT_ID_SET
  fi

  if [ -n "$username" ] && [ -n "$client_id" ]; then
    logger::error 'invalid payload (must specify only username or client_id)'
    exit $E_BOTH_USERNAME_AND_CLIENT_ID_SET
  fi

  if [ -n "$username" ] && [ -z "$password" ]; then
    logger::error 'invalid payload (missing password)'
    exit $E_PASSWORD_NOT_SET
  fi

  if [ -n "$client_id" ] && [ -z "$client_secret" ]; then
    logger::error 'invalid payload (missing client_secret)'
    exit $E_CLIENT_SECRET_NOT_SET
  fi

  # Login with credentials
  cf_api "$api" "$skip_cert_check"
  if [ -n "$client_id" ]; then
    cf_auth_client "$client_id" "$client_secret"
  else
    cf_auth_user "$username" "$password" "$origin"
  fi
fi

if [ -n "$command_file" ]; then
  if [ -r "$command_file" ]; then
    logger::info "Populating params from file (overwriting params in pipeline definition): $command_file"
    params=$(yq r --tojson "$command_file")
  else
    logger::error "invalid payload (can not find command_file: $command_file)"
    exit $E_COMMAND_FILE_NOT_FOUND
  fi
fi

# convert the single command into a single element array
if echo $params | jq -e 'has("command")' >/dev/null; then
  params=$(jq -n --argjson params "$params" '{commands: [ $params ] }')
fi

if ! echo $params | jq -e 'has("commands")' >/dev/null; then
  logger::error 'invalid payload (missing command)'
  exit $E_COMMAND_NOT_SET
fi

logger::info "$(cf version)"

echo "$params" | jq -c '.commands[]' | while read -r options; do

  command=$(echo $options | jq -r '.command')

  # Backup the old values so we can reset at the end of the loop
  [ -n "${CF_COLOR:-}" ] && OLD_CF_COLOR=$CF_COLOR || true
  [ -n "${CF_DIAL_TIMEOUT:-}" ] && OLD_CF_DIAL_TIMEOUT=$CF_DIAL_TIMEOUT || true
  [ -n "${CF_TRACE:-}" ] && OLD_CF_TRACE=$CF_TRACE || true

  # Override source values if set in params
  cf_color=$(echo $options | jq -r '.cf_color //empty') && [ -n "$cf_color" ] && export CF_COLOR=$cf_color
  cf_dial_timeout=$(echo $options | jq -r '.cf_dial_timeout //empty') && [ -n "$cf_dial_timeout" ] && export CF_DIAL_TIMEOUT=$cf_dial_timeout
  cf_trace=$(echo $options | jq -r '.cf_trace //empty') && [ -n "$cf_trace" ] && export CF_TRACE=$cf_trace
  org=$(echo $options | jq -r '.org //empty') && [ -z "$org" ] && org=$source_org
  space=$(echo $options | jq -r '.space //empty') && [ -z "$space" ] && space=$source_space

  if [ "create-org" = "$command" ]; then
    logger::info "Executing $(logger::highlight "$command"): $org"
    cf_create_org "$org"
  elif [ "delete-org" = "$command" ]; then
    logger::info "Executing $(logger::highlight "$command"): $org"
    cf_delete_org "$org"
  elif [ "create-space" = "$command" ]; then
    logger::info "Executing $(logger::highlight "$command"): $space"
    cf_create_space "$org" "$space"
  elif [ "delete-space" = "$command" ]; then
    logger::info "Executing $(logger::highlight "$command"): $space"
    cf_delete_space "$org" "$space"
  elif [ "create-user" = "$command" ]; then
    new_username=$(echo $options | jq -r '.username //empty')
    new_password=$(echo $options | jq -r '.password //empty')
    new_origin=$(echo $options | jq -r '.origin //empty')
    logger::info "Executing $(logger::highlight "$command"): $new_username"
    if [ -n "$new_password" ]; then
      cf_create_user_with_password "$new_username" "$new_password"
    elif [ -n "$new_origin" ]; then
      cf_create_user_with_origin "$new_username" "$new_origin"
    else
      logger::error "Invalid config: Must specify password or origin"
    fi
  elif [ "create-users-from-file" = "$command" ]; then
    file=$(echo $options | jq -r '.file //empty')
    cf_create_users_from_file "$file"
  elif [ "delete-user" = "$command" ]; then
    username=$(echo $options | jq -r '.username //empty')
    logger::info "Executing $(logger::highlight "$command"): $username"
    cf_delete_user "$username"
  elif [ "create-domain" = "$command" ]; then
    domain=$(echo $options | jq -r '.domain //empty')
    logger::info "Executing $(logger::highlight "$command"): $domain"
    if cf_has_private_domain "$org" "$domain"; then
      logger::info "$(logger::highlight "Domain $domain already exists")"
    else
      cf_create_domain "$org" "$domain"
    fi
  elif [ "delete-domain" = "$command" ]; then
    domain=$(echo $options | jq -r '.domain //empty')
    logger::info "Executing $(logger::highlight "$command"): $domain"
    cf_target "$org" "$space"
    cf_delete_domain "$domain"
  elif [ "create-route" = "$command" ]; then
    other_space=$(echo $options | jq -r '.other_space //empty')
    domain=$(echo $options | jq -r '.domain //empty')
    hostname=$(echo $options | jq -r '.hostname //empty')
    path=$(echo $options | jq -r '.path //empty')
    port=$(echo $options | jq -r '.port //empty')
    logger::info "Executing $(logger::highlight "$command"): $domain"
    cf_target "$org" "$space"
    cf_create_route "${other_space:-$space}" "$domain" "$hostname" "$path" "$port"
  elif [ "delete-route" = "$command" ]; then
    domain=$(echo $options | jq -r '.domain //empty')
    hostname=$(echo $options | jq -r '.hostname //empty')
    path=$(echo $options | jq -r '.path //empty')
    port=$(echo $options | jq -r '.port //empty')
    logger::info "Executing $(logger::highlight "$command"): $domain"
    cf_target "$org" "$space"
    cf_delete_route "$domain" "$hostname" "$path" "$port"
  elif [ "map-route" = "$command" ]; then
    app_name=$(echo $options | jq -r '.app_name //empty')
    domain=$(echo $options | jq -r '.domain //empty')
    hostname=$(echo $options | jq -r '.hostname //empty')
    path=$(echo $options | jq -r '.path //empty')
    port=$(echo $options | jq -r '.port //empty')
    logger::info "Executing $(logger::highlight "$command"): $domain"
    cf_target "$org" "$space"
    cf_map_route "$app_name" "$domain" "$hostname" "$path" "$port"
  elif [ "unmap-route" = "$command" ]; then
    app_name=$(echo $options | jq -r '.app_name //empty')
    domain=$(echo $options | jq -r '.domain //empty')
    hostname=$(echo $options | jq -r '.hostname //empty')
    path=$(echo $options | jq -r '.path //empty')
    port=$(echo $options | jq -r '.port //empty')
    logger::info "Executing $(logger::highlight "$command"): $domain"
    cf_target "$org" "$space"
    cf_unmap_route "$app_name" "$domain" "$hostname" "$path" "$port"
  elif [ "create-user-provided-service" = "$command" ]; then
    service_instance=$(echo $options | jq -r '.service_instance //empty')
    credentials=$(echo $options | jq -r '.credentials //empty')
    syslog_drain_url=$(echo $options | jq -r '.syslog_drain_url //empty')
    route_service_url=$(echo $options | jq -r '.route_service_url //empty')
    logger::info "Executing $(logger::highlight "$command"): $service_instance"
    cf_target "$org" "$space"

    if [ -n "$credentials" ]; then
      cf_create_or_update_user_provided_service_credentials "$service_instance" "$credentials"
    elif [ -n "$syslog_drain_url" ]; then
      cf_create_or_update_user_provided_service_syslog "$service_instance" "$syslog_drain_url"
    elif [ -n "$route_service_url" ]; then
      cf_create_or_update_user_provided_service_route "$service_instance" "$route_service_url"
    fi
  elif [ "create-service" = "$command" ]; then
    service=$(echo $options | jq -r '.service //empty')
    plan=$(echo $options | jq -r '.plan //empty')
    service_instance=$(echo $options | jq -r '.service_instance //empty')
    configuration=$(echo $options | jq -r '.configuration //empty')
    tags=$(echo $options | jq -r '.tags //empty')
    timeout=$(echo $options | jq -r '.timeout //empty')
    wait=$(echo $options | jq -r '.wait_for_service //"false"')
    update_service=$(echo $options | jq -r '.update_service //"false"')
    logger::info "Executing $(logger::highlight "$command"): $service_instance"
    cf_target "$org" "$space"
    if [ "true" = "$update_service" ]; then
      cf_create_or_update_service "$service" "$plan" "$service_instance" "$configuration" "$tags"
    else
      cf_create_service "$service" "$plan" "$service_instance" "$configuration" "$tags"
    fi
    if [ "true" = "$wait" ]; then
      cf_wait_for_service_instance "$service_instance" "$timeout"
    fi
  elif [ "update-service" = "$command" ]; then
    service_instance=$(echo $options | jq -r '.service_instance //empty')
    plan=$(echo $options | jq -r '.plan //empty')
    configuration=$(echo $options | jq -r '.configuration //empty')
    tags=$(echo $options | jq -r '.tags //empty')
    timeout=$(echo $options | jq -r '.timeout //empty')
    wait=$(echo $options | jq -r '.wait_for_service //"false"')
    logger::info "Executing $(logger::highlight "$command"): $service_instance"
    cf_target "$org" "$space"
    cf_update_service "$service_instance" "$plan" "$configuration" "$tags"
    if [ "true" = "$wait" ]; then
      cf_wait_for_service_instance "$service_instance" "$timeout"
    fi
  elif [ "share-service" = "$command" ]; then
    service_instance=$(echo $options | jq -r '.service_instance //empty')
    other_space=$(echo $options | jq -r '.other_space //empty')
    other_org=$(echo $options | jq -r '.other_org //empty')
    logger::info "Executing $(logger::highlight "$command"): $service_instance"
    cf_target "$org" "$space"
    cf_share_service "$service_instance" "$other_space" "$other_org"
  elif [ "unshare-service" = "$command" ]; then
    service_instance=$(echo $options | jq -r '.service_instance //empty')
    other_space=$(echo $options | jq -r '.other_space //empty')
    other_org=$(echo $options | jq -r '.other_org //empty')
    logger::info "Executing $(logger::highlight "$command"): $service_instance"
    cf_target "$org" "$space"
    cf_unshare_service "$service_instance" "$other_space" "$other_org"
  elif [ "wait-for-service" = "$command" ]; then
    service_instance=$(echo $options | jq -r '.service_instance //empty')
    timeout=$(echo $options | jq -r '.timeout //empty')
    logger::info "Executing $(logger::highlight "$command"): $service_instance"
    cf_target "$org" "$space"
    cf_wait_for_service_instance "$service_instance" "$timeout"
  elif [ "delete-service" = "$command" ]; then
    service_instance=$(echo $options | jq -r '.service_instance //empty')
    timeout=$(echo $options | jq -r '.timeout //empty')
    wait=$(echo $options | jq -r '.wait_for_service //"false"')
    logger::info "Executing $(logger::highlight "$command"): $service_instance"
    cf_target "$org" "$space"
    cf_delete_service "$service_instance"
    if [ "true" = "$wait" ]; then
      cf_wait_for_delete_service_instance "$service_instance" "$timeout"
    fi
  elif [ "create-service-key" = "$command" ]; then
    service_instance=$(echo $options | jq -r '.service_instance //empty')
    service_key=$(echo $options | jq -r '.service_key //empty')
    configuration=$(echo $options | jq -r '.configuration //empty')
    logger::info "Executing $(logger::highlight "$command"): $service_key"
    cf_target "$org" "$space"
    cf_create_service_key "$service_instance" "$service_key" "$configuration"
  elif [ "delete-service-key" = "$command" ]; then
    service_instance=$(echo $options | jq -r '.service_instance //empty')
    service_key=$(echo $options | jq -r '.service_key //empty')
    logger::info "Executing $(logger::highlight "$command"): $service_key"
    cf_target "$org" "$space"
    cf_delete_service_key "$service_instance" "$service_key"
  elif [ "push" = "$command" ]; then
    app_name=$(echo $options | jq -r '.app_name //empty')
    buildpack=$(echo $options | jq -r '.buildpack //empty')
    startup_command=$(echo $options | jq -r '.startup_command //empty')
    docker_image=$(echo $options | jq -r '.docker_image //empty')
    docker_username=$(echo $options | jq -r '.docker_username //empty')
    docker_password=$(echo $options | jq -r '.docker_password //empty')
    manifest=$(echo $options | jq -r '.manifest //empty')
    hostname=$(echo $options | jq -r '.hostname //empty')
    instances=$(echo $options | jq -r '.instances //empty')
    disk_quota=$(echo $options | jq -r '.disk_quota //empty')
    memory=$(echo $options | jq -r '.memory //empty')
    no_start=$(echo $options | jq -r '.no_start //empty')
    path=$(echo $options | jq -r '.path //empty')
    stack=$(echo $options | jq -r '.stack //empty')
    vars=$(echo $options | jq -r '.vars //empty')
    vars_files=$(echo $options | jq -r '.vars_files //empty')
    staging_timeout=$(echo $options | jq -r '.staging_timeout //0')
    startup_timeout=$(echo $options | jq -r '.startup_timeout //0')

    args=()
    [ -n "$app_name" ]        && args+=("$app_name")
    [ -n "$buildpack" ]       && args+=(-b "$buildpack")
    [ -n "$startup_command" ] && args+=(-c "$startup_command")
    [ -n "$docker_image" ]    && args+=(--docker-image "$docker_image")
    [ -n "$docker_username" ] && args+=(--docker-username "$docker_username")
    [ -n "$docker_password" ] && export CF_DOCKER_PASSWORD="$docker_password"
    [ -n "$manifest" ]        && args+=(-f "$manifest")
    [ -n "$hostname" ]        && args+=(-n "$hostname")
    [ -n "$instances" ]       && args+=(-i "$instances")
    [ -n "$disk_quota" ]      && args+=(-k "$disk_quota")
    [ -n "$memory" ]          && args+=(-m "$memory")
    [ -n "$no_start" ]        && args+=(--no-start)
    [ -n "$path" ]            && args+=(-p $path) # don't quote so we can support globbing
    [ -n "$stack" ]           && args+=(-s "$stack")

    for key in $(echo $vars | jq -r 'keys[]'); do
      value=$(echo $vars | jq -r --arg key "$key" '.[$key]')
      args+=(--var "$key=$value")
    done

    for vars_file in $(echo $vars_files | jq -r '.[]'); do
      args+=(--vars-file "$vars_file")
    done

    logger::info "Executing $(logger::highlight "$command"): $app_name"
    cf_target "$org" "$space"

    [ "$staging_timeout" -gt "0" ] && export CF_STAGING_TIMEOUT=$staging_timeout
    [ "$startup_timeout" -gt "0" ] && export CF_STARTUP_TIMEOUT=$startup_timeout

    cf push "${args[@]}"

    unset CF_STAGING_TIMEOUT
    unset CF_STARTUP_TIMEOUT
    [ -n "$docker_password" ]   && unset CF_DOCKER_PASSWORD

  elif [ "zero-downtime-push" = "$command" ]; then
    manifest=$(echo $options | jq -r '.manifest //empty')
    path=$(echo $options | jq -r '.path //empty')
    current_app_name=$(echo $options | jq -r '.current_app_name //empty')
    environment_variables=$(echo $options | jq -r '.environment_variables //empty')
    stack=$(echo $options | jq -r '.stack //empty')

    if [ ! -f "$manifest" ]; then
      logger::error "invalid payload (manifest is not a file: $manifest)"
      exit $E_MANIFEST_FILE_NOT_FOUND
    fi

    if [ -n "$environment_variables" ]; then
      cp "$manifest" "$manifest.original"
      for key in $(echo $environment_variables | jq -r 'keys[]'); do
        value=$(echo $environment_variables | jq -r --arg key "$key" '.[$key]')
        yq w -i "$manifest" -- "env.$key" "$value"
      done
    fi

    args=(-f "$manifest")
    [ -n "$path" ]  && args+=(-p $path) # don't quote so we can support globbing
    [ -n "$stack" ] && args+=(-s "$stack")

    logger::info "Executing $(logger::highlight "$command"): $current_app_name"
    cf_target "$org" "$space"

    if [ -n "$current_app_name" ]; then
      # autopilot (tested v0.0.2 - v0.0.6) doesn't like CF_TRACE=true
      CF_TRACE=false cf zero-downtime-push "$current_app_name" "${args[@]}"
    else
      cf push "${args[@]}"
    fi
  elif [ "set-env" = "$command" ]; then
    app_name=$(echo $options | jq -r '.app_name //empty')
    env_var_name=$(echo $options | jq -r '.env_var_name //empty')
    env_var_value=$(echo $options | jq -r '.env_var_value //empty')
    logger::info "Executing $(logger::highlight "$command"): $app_name"
    cf_target "$org" "$space"
    cf_set_env "$app_name" "$env_var_name" "$env_var_value"
  elif [ "start" = "$command" ]; then
    app_name=$(echo $options | jq -r '.app_name //empty')
    staging_timeout=$(echo $options | jq -r '.staging_timeout //empty')
    startup_timeout=$(echo $options | jq -r '.startup_timeout //empty')
    logger::info "Executing $(logger::highlight "$command"): $app_name"
    cf_target "$org" "$space"
    cf_start "$app_name" "$staging_timeout" "$startup_timeout"
  elif [ "stop" = "$command" ]; then
    app_name=$(echo $options | jq -r '.app_name //empty')
    logger::info "Executing $(logger::highlight "$command"): $app_name"
    cf_target "$org" "$space"
    cf_stop "$app_name"
  elif [ "restart" = "$command" ]; then
    app_name=$(echo $options | jq -r '.app_name //empty')
    staging_timeout=$(echo $options | jq -r '.staging_timeout //empty')
    startup_timeout=$(echo $options | jq -r '.startup_timeout //empty')
    logger::info "Executing $(logger::highlight "$command"): $app_name"
    cf_target "$org" "$space"
    cf_restart "$app_name" "$staging_timeout" "$startup_timeout"
  elif [ "restage" = "$command" ]; then
    app_name=$(echo $options | jq -r '.app_name //empty')
    staging_timeout=$(echo $options | jq -r '.staging_timeout //empty')
    startup_timeout=$(echo $options | jq -r '.startup_timeout //empty')
    logger::info "Executing $(logger::highlight "$command"): $app_name"
    cf_target "$org" "$space"
    cf_restage "$app_name" "$staging_timeout" "$startup_timeout"
  elif [ "rename" = "$command" ]; then
    app_name=$(echo $options | jq -r '.app_name //empty')
    new_app_name=$(echo $options | jq -r '.new_app_name //empty')
    logger::info "Executing $(logger::highlight "$command"): $app_name"
    cf_target "$org" "$space"
    cf_rename "$app_name" "$new_app_name"
  elif [ "add-network-policy" = "$command" ]; then
    source_app=$(echo $options | jq -r '.source_app //empty')
    destination_app=$(echo $options | jq -r '.destination_app //empty')
    protocol=$(echo $options | jq -r '.protocol //empty')
    port=$(echo $options | jq -r '.port //empty')
    logger::info "Executing $(logger::highlight "$command"): $source_app"
    cf_target "$org" "$space"
    cf_add_network_policy "$source_app" "$destination_app" "$protocol" "$port"
  elif [ "remove-network-policy" = "$command" ]; then
    source_app=$(echo $options | jq -r '.source_app //empty')
    destination_app=$(echo $options | jq -r '.destination_app //empty')
    protocol=$(echo $options | jq -r '.protocol //empty')
    port=$(echo $options | jq -r '.port //empty')
    logger::info "Executing $(logger::highlight "$command"): $source_app"
    cf_target "$org" "$space"
    cf_remove_network_policy "$source_app" "$destination_app" "$protocol" "$port"
  elif [ "run-task" = "$command" ]; then
    app_name=$(echo $options | jq -r '.app_name //empty')
    task_command=$(echo $options | jq -r '.task_command //empty')
    task_name=$(echo $options | jq -r '.task_name //empty')
    memory=$(echo $options | jq -r '.memory //empty')
    disk_quota=$(echo $options | jq -r '.disk_quota //empty')
    logger::info "Executing $(logger::highlight "$command"): $app_name"
    cf_target "$org" "$space"
    cf_run_task "$app_name" "$task_command" "$task_name" "$memory" "$disk_quota"
  elif [ "scale" = "$command" ]; then
    app_name=$(echo $options | jq -r '.app_name //empty')
    instances=$(echo $options | jq -r '.instances //empty')
    memory=$(echo $options | jq -r '.memory //empty')
    disk_quota=$(echo $options | jq -r '.disk_quota //empty')
    logger::info "Executing $(logger::highlight "$command"): $app_name"
    cf_target "$org" "$space"
    cf_scale "$app_name" "$instances" "$memory" "$disk_quota"
  elif [ "delete" = "$command" ]; then
    app_name=$(echo $options | jq -r '.app_name //empty')
    delete_mapped_routes=$(echo $options | jq -r '.delete_mapped_routes //empty')
    logger::info "Executing $(logger::highlight "$command"): $app_name"
    cf_target "$org" "$space"
    cf_delete "$app_name" "$delete_mapped_routes"
  elif [ "bind-service" = "$command" ]; then
    app_name=$(echo $options | jq -r '.app_name //empty')
    service_instance=$(echo $options | jq -r '.service_instance //empty')
    configuration=$(echo $options | jq -r '.configuration //empty')
    logger::info "Executing $(logger::highlight "$command"): $service_instance"
    cf_target "$org" "$space"
    cf_bind_service "$app_name" "$service_instance" "$configuration"
  elif [ "unbind-service" = "$command" ]; then
    app_name=$(echo $options | jq -r '.app_name //empty')
    service_instance=$(echo $options | jq -r '.service_instance //empty')
    logger::info "Executing $(logger::highlight "$command"): $service_instance"
    cf_target "$org" "$space"
    cf_unbind_service "$app_name" "$service_instance"
  elif [ "bind-route-service" = "$command" ]; then
    domain=$(echo $options | jq -r '.domain //empty')
    service_instance=$(echo $options | jq -r '.service_instance //empty')
    hostname=$(echo $options | jq -r '.hostname //empty')
    logger::info "Executing $(logger::highlight "$command"): $service_instance"
    cf_target "$org" "$space"
    cf_bind_route_service "$domain" "$service_instance" "$hostname"
  elif [ "create-service-broker" = "$command" ]; then
    service_broker=$(echo $options | jq -r '.service_broker //empty')
    username=$(echo $options | jq -r '.username //empty')
    password=$(echo $options | jq -r '.password //empty')
    url=$(echo $options | jq -r '.url //empty')
    is_space_scoped=$(echo $options | jq -r '.space_scoped //"false"')
    logger::info "Executing $(logger::highlight "$command"): $service_broker"
    if [ "true" = "$is_space_scoped" ]; then
      cf_target "$org" "$space"
    fi
    cf_create_service_broker "$service_broker" "$username" "$password" "$url" "$is_space_scoped"
  elif [ "enable-service-access" = "$command" ]; then
    service_broker=$(echo $options | jq -r '.service_broker //empty')
    service=$(echo $options | jq -r '.service //empty')
    plan=$(echo $options | jq -r '.plan //empty')
    access_org=$(echo $options | jq -r '.access_org //empty')
    logger::info "Executing $(logger::highlight "$command"): $service"

    # backwards compatibility for deprecated 'service_broker' param (https://github.com/nulldriver/cf-cli-resource/issues/21)
    service=${service:-$service_broker}

    cf_enable_service_access "$service" "$plan" "$access_org"
  elif [ "disable-service-access" = "$command" ]; then
    service_broker=$(echo $options | jq -r '.service_broker //empty')
    service=$(echo $options | jq -r '.service //empty')
    plan=$(echo $options | jq -r '.plan //empty')
    access_org=$(echo $options | jq -r '.access_org //empty')
    logger::info "Executing $(logger::highlight "$command"): $service_broker"

    # backwards compatibility for deprecated 'service_broker' param (https://github.com/nulldriver/cf-cli-resource/issues/21)
    service=${service:-$service_broker}

    cf_disable_service_access "$service" "$plan" "$access_org"
  elif [ "delete-service-broker" = "$command" ]; then
    service_broker=$(echo $options | jq -r '.service_broker //empty')
    logger::info "Executing $(logger::highlight "$command"): $service_broker"
    cf_target "$org" "$space"
    cf_delete_service_broker "$service_broker"
  elif [ "enable-feature-flag" = "$command" ]; then
    feature_name=$(echo $options | jq -r '.feature_name //empty')
    logger::info "Executing $(logger::highlight "$command"): $feature_name"
    cf_enable_feature_flag "$feature_name"
  elif [ "disable-feature-flag" = "$command" ]; then
    feature_name=$(echo $options | jq -r '.feature_name //empty')
    logger::info "Executing $(logger::highlight "$command"): $feature_name"
    cf_disable_feature_flag "$feature_name"
  elif [ "create-buildpack" = "$command" ]; then
    buildpack=$(echo $options | jq -r '.buildpack //empty')
    path=$(echo $options | jq -r '.path //empty')
    position=$(echo $options | jq -r '.position //empty')
    enabled=$(echo $options | jq -r '.enabled //empty')
    logger::info "Executing $(logger::highlight "$command"): $buildpack"

    args=("$buildpack" $path "$position") # don't quote $path so we can support globbing
    [ "$enabled" == "true" ]  && args+=(--enable)
    [ "$enabled" == "false" ] && args+=(--disable)

    cf create-buildpack "${args[@]}"
  elif [ "update-buildpack" = "$command" ]; then
    buildpack=$(echo $options | jq -r '.buildpack //empty')
    enabled=$(echo $options | jq -r '.enabled //empty')
    locked=$(echo $options | jq -r '.locked //empty')
    assign_stack=$(echo $options | jq -r '.assign_stack //empty')
    path=$(echo $options | jq -r '.path //empty')
    position=$(echo $options | jq -r '.position //empty')
    logger::info "Executing $(logger::highlight "$command"): $buildpack"

    args=("$buildpack")
    [ "$enabled" == "true"  ] && args+=(--enable)
    [ "$enabled" == "false" ] && args+=(--disable)
    [ "$locked"  == "true"  ] && args+=(--lock)
    [ "$locked"  == "false" ] && args+=(--unlock)

    [ -n "$assign_stack" ] && args+=(--assign-stack "$assign_stack")
    [ -n "$path" ] && args+=(-p $path) # don't quote so we can support globbing
    [ -n "$position" ] && args+=(-i "$position")

    cf update-buildpack "${args[@]}"
  elif [ "delete-buildpack" = "$command" ]; then
    buildpack=$(echo $options | jq -r '.buildpack //empty')
    stack=$(echo $options | jq -r '.stack //empty')
    logger::info "Executing $(logger::highlight "$command"): $buildpack"

    args=("$buildpack")
    [ -n "$stack" ] && args+=(-s "$stack")

    cf delete-buildpack -f "${args[@]}"
  else
    logger::error "invalid payload (unknown command: $command)"
    exit $E_UNKNOWN_COMMAND
  fi

  # Reset back to the old values for the next iteration
  [ -n "${OLD_CF_COLOR:-}" ] && CF_COLOR=$OLD_CF_COLOR || true
  [ -n "${OLD_CF_DIAL_TIMEOUT:-}" ] && CF_DIAL_TIMEOUT=$OLD_CF_DIAL_TIMEOUT || true
  [ -n "${OLD_CF_TRACE:-}" ] && CF_TRACE=$OLD_CF_TRACE || true

done

jq -n \
--arg timestamp $(date +%s) \
'{
  version: {
    timestamp: $timestamp
  }
}' >&3
